// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tournament {
  id        String @db.Uuid @id @default(uuid())
  name      String
  rounds    Round[]
  rosters   Tournament_Team[]
  isOfficial Boolean @default(false)
  isTeam     Boolean @default(false)
  year      Int
  replayPostUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id           String @db.Uuid @id @default(uuid())
  name         String
  tournaments  Tournament_Team[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Round {
  id           String @db.Uuid @id @default(uuid())
  tournamentId String @db.Uuid
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  matches      Match[]
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Match {
  id           String @db.Uuid @id @default(uuid())
  players      Player_Match[]
  roundId      String @db.Uuid
  round        Round @relation(fields: [roundId], references: [id])
  bestOf       Int
  games        Game[]
  generation   String
  tier         String
  playedAt     DateTime?
  stage        String?  // Can be "Regular Season", "Playoff", or "Tiebreak"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Game {
  id         String @db.Uuid @id @default(uuid())
  matchId    String @db.Uuid
  match      Match @relation(fields: [matchId], references: [id])
  players    Player_Game[]
  replayUrl  String?
  generation String
  tier       String
  playedAt   DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Player {
  id           String @db.Uuid @id @default(uuid())
  name         String
  matches      Player_Match[]
  games        Player_Game[]
  tournaments  Tournament_Player[]
  aliases      PlayerAlias[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tournament_Team {
  tournamentId String @db.Uuid
  teamId       String @db.Uuid
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  team         Team @relation(fields: [teamId], references: [id])
  id           String @db.Uuid @id @default(uuid())
  players      Tournament_Player[]
  matches      Player_Match[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tournament_Player {
  playerId          String @db.Uuid
  player            Player @relation(fields: [playerId], references: [id])
  id                String @db.Uuid @id @default(uuid())
  tournament_teamId String @db.Uuid
  tournament_team   Tournament_Team @relation(fields: [tournament_teamId], references: [id])
  price             Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Player_Match {
  playerId          String @db.Uuid
  matchId           String @db.Uuid
  tournament_teamId String @db.Uuid
  player            Player @relation(fields: [playerId], references: [id])
  match             Match @relation(fields: [matchId], references: [id])
  team              Tournament_Team @relation(fields: [tournament_teamId], references: [id])
  winner            Boolean?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  @@id([playerId, matchId])
}

model Player_Game {
  playerId   String @db.Uuid
  gameId     String @db.Uuid
  player     Player @relation(fields: [playerId], references: [id])
  game       Game @relation(fields: [gameId], references: [id])
  winner     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@id([playerId, gameId])
}

model PlayerAlias {
  id        String @db.Uuid @id @default(uuid())
  playerId  String @db.Uuid
  player    Player @relation(fields: [playerId], references: [id])
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
  @@index([playerId])
}
